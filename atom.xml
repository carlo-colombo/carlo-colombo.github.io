<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>litblog</title>
  
  
  <link href="https://carlo-colombo.github.io/atom.xml" rel="self"/>
  
  <link href="https://carlo-colombo.github.io/"/>
  <updated>2020-12-01T23:02:43.199Z</updated>
  <id>https://carlo-colombo.github.io/</id>
  
  <author>
    <name>Carlo Colombo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Deploy TiddlyWiki on Kubernetes</title>
    <link href="https://carlo-colombo.github.io/2020/12/02/Deploy-TiddlyWiki-on-Kubernetes/"/>
    <id>https://carlo-colombo.github.io/2020/12/02/Deploy-TiddlyWiki-on-Kubernetes/</id>
    <published>2020-12-01T23:02:43.000Z</published>
    <updated>2020-12-01T23:02:43.199Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Discovery-of-TiddlyWiki"><a href="#Discovery-of-TiddlyWiki" class="headerlink" title="Discovery of TiddlyWiki"></a>Discovery of TiddlyWiki</h2><p>I discovered <a href="https://tiddlywiki.com/">TiddlyWiki</a> reading the <a href="https://joearms.github.io/">blog of the late Joe Armstrong</a> (of Erlang fame). After reading a post about Erlang and Elixir I started looking into other posts and I found his introduction to TiddlyWiki. The author presented how was using the wiki as his blog and as todo list systems.</p><p>I periodically start to investigate, use for a few weeks, and then abandon todo list systems. I went through at least Trello, Google Tasks, Google Keep, textfiles, command line tools, and probably some mobile app. I did not experiment with these systems for a while so I decided to give it a go. As bonus point it can be used personal knowledge base and it seemed infinitly configurable and extendable with JavaScript. A few minutes and I downloaded the one html file that is all that is needed to start use TiddlyWiki.</p><h2 id="My-first-setup"><a href="#My-first-setup" class="headerlink" title="My first setup"></a>My first setup</h2><p>The original way to use TiddlyWiki is to have a single file that can be resaved when new Tiddlers are added to the wiki. This was not suitable to me as I was planning to access to the wiki from at least: my phone, my laptop and the my work computer. I felt that if I have to manually export the TiddlyWiki then move to another device I would have it abondoned in no time as I would quickly forget, then I would have out of sync wikis and then stopped using it.</p><p>TiddlyWiki propose a number of ways to save and share TiddlyWiki, I went with storing it on <a href="https://tiddlywiki.com/static/TiddlyDrive%2520Add-on%2520for%2520Google%2520Drive%2520by%2520Joshua%2520Stubbs.html">Google Drive</a>. It worked and it served me well, but a few times I found my self with out of sync wikis and I have to retrieve the Tiddlers I was interested in from Google Drive revisions. I was able to consume the wiki from both my phone and computers but it has some limitation for concurrent editing, involutary as if it was open on the phone and tried to edit on the computer and it got messy. At the end the backend is a single file that is overriden when the wiki is saved.</p><p>In this period I was mostly using it for TODO management using Tiddlers from Joe Armstrong, organizing my job search, and as groceries shopping list. At the same time I started to have an itch to interact programmatically with the wiki(adding, listing, …).</p><h2 id="Entering-k3s"><a href="#Entering-k3s" class="headerlink" title="Entering k3s"></a>Entering k3s</h2><p>One of the <a href="https://tiddlywiki.com/#GettingStarted">many option</a> to deploy TiddlyWiki is to run it on <a href="https://tiddlywiki.com/#Installing%20TiddlyWiki%20on%20Node.js">Node.js</a> that also provide HTTP api to interact with the wiki. After some experimentation on the local machine I was set to deploy it somewhere more persistent and make it available from everywhere.</p><p><a href="https://k3s.io/">k3s</a> is a lightweight kubernetes distribuition from Rancher that deploys as a single binary and is focused on IoT and edge computing but I think is very suitable to an hobbyst like me that worked on Kubernetes and use something confortable without all the complication of deploying a more featured distribuition. I find it so confortable that I have a k3s node running on my work laptop hosting TiddlyWiki but it could be the argument of another post.</p><p>I already maintain a k3s kubernetes cluster (of 1 node) on Scaleway with some Telegram bots and static websites so I started to conjure some yaml to deploy it on the cluster.</p><p>After experimenting creating my own container image I find out that <code>elasticdog/tiddlywiki</code> exists and it is maintened so I settled with that. The Node.js TiddlyWiki distribution supports authentication and some basic authorization roles (reader and writer), it required me some fiddling with the parameters but at the end I was able to define multiple users (admin, carlo, and bot) with no anonymous access. The cluster is already set for https using certmanager and Let’s Encrypt, so I plugged in it with an Ingress controller provided by Traefik and I was able to have it available on the internet reasonably secure with encryption and authentication.</p><p>Tiddlywiki need to be pointed to a <code>wikifolder</code> that will contain tiddlers and a single configuration file (<code>tiddlywiki.info</code>). The proper way to do it would be to run <code>tiddlywiki &lt;wikifolder&gt; --init</code> in an init container, make it skip the creation if the file already exist or removing the init container in a following deployment. What I did was more messy as I exec’d in the Tiddlywiki container and then copy the <code>.info</code> file created on my machine in the remote volume.</p><p>The full configuration is available on <a href="https://github.com/carlo-colombo/deployment/blob/master/spec/tiddlywiki.yml">carlo-colombo/tiddlywiki</a>, I am using <a href="https://carvel.dev/">Carvel</a> (former k14s) tools ytt, kapp, and kbld to build images, inject secrets and deploy to the cluster (check <a href="https://github.com/carlo-colombo/deployment/blob/master/deploy.sh"><code>deploy.sh</code></a>).</p><h2 id="Backup"><a href="#Backup" class="headerlink" title="Backup"></a>Backup</h2><p>I am using the very good <a href="https://restic.net/">restic</a> to backup my tiddlers to a remote storage, Scaleway Object Storage (that is S3 compatible). I backup <a href="https://github.com/carlo-colombo/deployment/blob/master/spec/backup.yml">every 10 minutes</a> because I would be pissed if I was writing something long and lose more than 10 minutes of work, anyway restic is going to only store the diff if any and some metadata so I am not worried about my monthly invoice.</p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>The setup is quite convuluted and some level of overkill but I feel more confortable using kubernetes and a full declararive deployment than doing it manually with just docker or docker-compose on a server. At the end kubernetes was in my day to day job for a couple of years and I picked a few things along the way. </p><p>Having TiddlyWiki deployed and accessible from anywhere with http available to interact opens up nice possibilities to interact that I am exploring and having fun with it.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Discovery-of-TiddlyWiki&quot;&gt;&lt;a href=&quot;#Discovery-of-TiddlyWiki&quot; class=&quot;headerlink&quot; title=&quot;Discovery of TiddlyWiki&quot;&gt;&lt;/a&gt;Discovery of Tidd</summary>
      
    
    
    
    
    <category term="kubernetes" scheme="https://carlo-colombo.github.io/tags/kubernetes/"/>
    
    <category term="tiddlywiki" scheme="https://carlo-colombo.github.io/tags/tiddlywiki/"/>
    
    <category term="k3s" scheme="https://carlo-colombo.github.io/tags/k3s/"/>
    
  </entry>
  
  <entry>
    <title>Decorate functions using macros in Elixir</title>
    <link href="https://carlo-colombo.github.io/2017/06/10/Track-functions-call-in-Elixir-applications-with-Google-Analytics/"/>
    <id>https://carlo-colombo.github.io/2017/06/10/Track-functions-call-in-Elixir-applications-with-Google-Analytics/</id>
    <published>2017-06-10T07:10:30.000Z</published>
    <updated>2020-11-28T21:36:29.658Z</updated>
    
    <content type="html"><![CDATA[<p>After I decided to make public a telegram bot to monitor bus time in Dublin (<a href="https://telegram.me/dublin_bus_bot" target="_blank" rel="noopener">@dublin_bus_bot</a>). Before the release I became curious to see how many people will use it (spoiler: just an handful) and I thought that would be a good idea to track the use on google analytics.</p><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>Google analytics provide a measurement protocol that can be used to track things that are different from websites (mobile apps, IOT). At the moment no elixir client exists for this protocol (and it would not be anything more than an api wrapper). My plan is to make call to the Google Analytics TK endpoint with <a href="https://github.com/edgurgel/httpoison" target="_blank" rel="noopener">HTTPOison</a> but I’d prefer to not have to call the tracking function for every single bot command.</p><p>One of the feature that I prefer of the elixir are macros, macros allow to generate code at compile time. I decided to define a macro that looking like a function definition would define a function with the same body and with an additional call to the track function. I decided this approach because seems more idiomatics than using the <a href="https://github.com/arjan/decorator" target="_blank" rel="noopener">decorator syntax</a> typical of other languages (<code>@decorator</code> at least in python and javascript).</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">defmetered sample_function(arg1, arg2) <span class="keyword">do</span></span><br><span class="line">    IO.inspect([arg1, arg2])</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># would generate something similar to</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sample_function</span></span>(arg1, arg2) <span class="keyword">do</span></span><br><span class="line">    track(<span class="symbol">:sample_function</span>, [<span class="symbol">arg1:</span> arg1, <span class="symbol">arg2:</span> arg2])</span><br><span class="line">    IO.inspect([arg1, arg2])</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h3><p>I implemented this approach in <a href="https://hex.pm/packages/meter" target="_blank" rel="noopener">meter</a> to use in the telegram bot I wrote.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@doc</span> <span class="string">"""</span></span><br><span class="line"><span class="string">Replace a function definition, automatically tracking every call to the function</span></span><br><span class="line"><span class="string">on google analytics. It also track exception with the function track_error.</span></span><br><span class="line"><span class="string">This macro intended use is with a set of uniform functions that can be concettualy</span></span><br><span class="line"><span class="string">mapped to pageviews (eg: messaging bot commands).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Example:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    defmetered function(arg1, arg2), do: IO.inspect(&#123;arg1,arg2&#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    function(1,2)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">will call track with this parameters</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    track(:function, [arg1: 1, arg2: 2])</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Additional parameters will be loaded from the configurationd</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># A macro definition can use pattern matching to destructure the arguments</span></span><br><span class="line"><span class="function"><span class="keyword">defmacro</span> <span class="title">defmetered</span></span>(&#123;function,_,args&#125; = fundef, [<span class="symbol">do:</span> body]) <span class="keyword">do</span></span><br><span class="line">  <span class="comment"># arguments are defined in 3 elements tuples</span></span><br><span class="line">  <span class="comment"># this extract the arguments names in a list</span></span><br><span class="line">  names = Enum.map(args, &amp;elem(&amp;<span class="number">1</span>, 0))</span><br><span class="line"></span><br><span class="line">  <span class="comment"># meter will contain the body of the function that will be defined by the macro</span></span><br><span class="line">  metered = <span class="keyword">quote</span> <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># quote and unquote allow to switch context,</span></span><br><span class="line">    <span class="comment"># simplyfing a lot quoted code will run when the function is called</span></span><br><span class="line">    <span class="comment"># unquoted code run at compile time (when the macro is called)</span></span><br><span class="line">    values = unquote(</span><br><span class="line">      args</span><br><span class="line">      |&gt; Enum.map(<span class="keyword">fn</span> arg -&gt;  <span class="keyword">quote</span> <span class="keyword">do</span></span><br><span class="line">          <span class="comment"># allow to access a value at runtime knowing the name</span></span><br><span class="line">          <span class="comment"># elixir macros are hygienic so it's necessary to mark it</span></span><br><span class="line">          <span class="comment"># explicitly</span></span><br><span class="line">          var!(unquote(arg))</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Match argument names with their own values at call time</span></span><br><span class="line">    map = Enum.zip(unquote(names), values)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># wrap the original function call with a try to track errors too</span></span><br><span class="line">    try <span class="keyword">do</span></span><br><span class="line">      to_return = unquote(body)</span><br><span class="line">      track(unquote(function), map)</span><br><span class="line">      to_return</span><br><span class="line">    rescue</span><br><span class="line">      e -&gt;</span><br><span class="line">        track_error(unquote(function), map, e)</span><br><span class="line">        raise e</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># define a function with the same name and arguments and with the augmented body</span></span><br><span class="line">  <span class="keyword">quote</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span>(<span class="title">unquote</span></span>(fundef),unquote([<span class="symbol">do:</span> metered]))</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Conclusions"><a href="#Conclusions" class="headerlink" title="Conclusions"></a>Conclusions</h3><p>Elixir macros are a powerful tool to abstract away some functionality or to write DSLs. They require a bit of time to wrap head around, in particular with the context swith, but it totally worth the hassle if you can reduce the clutter in your code base.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;After I decided to make public a telegram bot to monitor bus time in Dublin (&lt;a href=&quot;https://telegram.me/dublin_bus_bot&quot; target=&quot;_blank&quot;</summary>
      
    
    
    
    
    <category term="elixir" scheme="https://carlo-colombo.github.io/tags/elixir/"/>
    
    <category term="macro" scheme="https://carlo-colombo.github.io/tags/macro/"/>
    
    <category term="google analytics" scheme="https://carlo-colombo.github.io/tags/google-analytics/"/>
    
  </entry>
  
  <entry>
    <title>Serverless Telegram Bot on GC Functions</title>
    <link href="https://carlo-colombo.github.io/2017/06/05/Serverless-Telegram-Bot-on-GC-functions/"/>
    <id>https://carlo-colombo.github.io/2017/06/05/Serverless-Telegram-Bot-on-GC-functions/</id>
    <published>2017-06-05T07:10:30.000Z</published>
    <updated>2020-11-28T21:36:29.658Z</updated>
    
    <content type="html"><![CDATA[<p>I played for some time with the idea of having a telegram bot run <em>serverless</em> in the cloud. Obviously the code run on some server but it is not necessary to care to provision, deploy, starting the application, etc. All you care about is <strong>your code</strong>.</p><p>GC Functions can be triggered by <strong>Pub/Sub</strong> events, <strong>buckets</strong> events and <strong>HTTP</strong> invocations. The latter is the one that we are going to provide as webhook to Telegram to be invoked when a message is sent to our bot.</p><p>Functions are going to remove some friction from our code, when the request is set with the appropriate <code>application/json</code> header the parsed json will be available on the <em>request</em> and when we send back an object is automatically serialized and sent back to the client. </p><p>The example code of the project can be found at <a href="https://github.com/carlo-colombo/serverless-telegram-bot-gc-functions" target="_blank" rel="noopener">https://github.com/carlo-colombo/serverless-telegram-bot-gc-functions</a></p><h3 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h3><ul><li>Google Cloud account and a project. <a href="https://cloud.google.com/resource-manager/docs/creating-managing-projects" target="_blank" rel="noopener">https://cloud.google.com/resource-manager/docs/creating-managing-projects</a></li><li>Enable Google Cloud Functions and RuntimeConfig API from the API manager.</li><li>Get a telegram bot token, ask it to the <a href="https://telegram.me/BotFather" target="_blank" rel="noopener">BotFather</a>.</li></ul><h4 id="Warning"><a href="#Warning" class="headerlink" title="Warning"></a>Warning</h4><ul><li>Both Google Cloud Functions and RuntimeConfig are both still in beta.</li><li>Even if the <a href="https://cloud.google.com/free/" target="_blank" rel="noopener">GCP free tier</a> is quite extended some costs can be billed.</li></ul><h3 id="The-token"><a href="#The-token" class="headerlink" title="The token"></a>The token</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># export for local testing </span></span><br><span class="line"><span class="built_in">export</span> TELEGRAM_TOKEN=133545asdasd</span><br><span class="line"></span><br><span class="line"><span class="comment"># set the token as GC runtime configuration </span></span><br><span class="line">gcloud beta runtime-config configs create prod-config</span><br><span class="line">gcloud beta runtime-config configs variables \</span><br><span class="line">    <span class="built_in">set</span> telegram/token  <span class="string">"<span class="variable">$TELEGRAM_TOKEN</span>"</span> \</span><br><span class="line">    --config-name prod-config</span><br></pre></td></tr></table></figure><h3 id="The-bot"><a href="#The-bot" class="headerlink" title="The bot"></a>The bot</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">exports.echoBot = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;<span class="attr">message</span>:&#123;chat, text&#125;&#125; = req.body</span><br><span class="line">    <span class="keyword">const</span> echo = <span class="string">`echo: <span class="subst">$&#123;text&#125;</span>`</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> getToken()</span><br><span class="line">        .then( <span class="function"><span class="params">token</span> =&gt;</span> request.post(&#123;</span><br><span class="line">            uri: <span class="string">`https://api.telegram.org/bot<span class="subst">$&#123;token&#125;</span>/sendMessage`</span>,</span><br><span class="line">            json: <span class="literal">true</span>,</span><br><span class="line">            body: &#123;<span class="attr">text</span>: echo, <span class="attr">chat_id</span>: chat.id&#125;</span><br><span class="line">        &#125;))</span><br><span class="line">        .then(<span class="function"><span class="params">resp</span> =&gt;</span> res.send(resp))</span><br><span class="line">        .catch(<span class="function"><span class="params">err</span> =&gt;</span> res.status(<span class="number">500</span>).send(err))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Just an easy bot that echos the received message.</p><h3 id="Retrieving-the-token"><a href="#Retrieving-the-token" class="headerlink" title="Retrieving the token"></a>Retrieving the token</h3><p>This function return a (promise) of a token either from the runtime config api when run online or from an environment variable when run locally. The value is retrieved using <a href="https://github.com/fredriks/cloud-functions-runtime-config" target="_blank" rel="noopener">fredriks/cloud-functions-runtime-config</a> that wraps the api. <code>NODE_ENV</code> is set to production when the function is run online, thus allowing to discriminate in which environment the function run.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getToken</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV == <span class="string">'production'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'cloud-functions-runtime-config'</span>)</span><br><span class="line">            .getVariable(<span class="string">'prod-config'</span>, <span class="string">'telegram/token'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(process.env.TELEGRAM_TOKEN)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Local-testing"><a href="#Local-testing" class="headerlink" title="Local testing"></a>Local testing</h3><p>Google provide a local emulator for Functions feature. It allow to local deploy a function to iterate over it without having to deploy to the google server. It reload the code when changed on the file system so it is not necessary to redeploy after the first time.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">npm -g install @google-cloud/functions-emulator</span><br><span class="line"></span><br><span class="line">functions start</span><br><span class="line">functions deploy echoBot --trigger-http</span><br><span class="line"></span><br><span class="line">curl -X POST \</span><br><span class="line">  -H &quot;Content-Type: application/json&quot; \</span><br><span class="line">  -d &apos;&#123;</span><br><span class="line">     &quot;message&quot;: &#123;</span><br><span class="line">       &quot;chat&quot;: &#123;</span><br><span class="line">         &quot;id&quot;: 1232456</span><br><span class="line">       &#125;,</span><br><span class="line">       &quot;text&quot;: &quot;hello world&quot;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;&apos; \</span><br><span class="line">   http://localhost:8010/PROJECT_ID/us-central1/echoBot</span><br><span class="line"></span><br><span class="line"># To tail logs</span><br><span class="line">watch functions logs read</span><br></pre></td></tr></table></figure><h3 id="Deploying"><a href="#Deploying" class="headerlink" title="Deploying"></a>Deploying</h3><p>Before deploy the function is required to create a Cloud Storage bucket where the function will be stored</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gsutil mb -c regional -l us-central1 gs://unique-bucket-name</span><br><span class="line"></span><br><span class="line">gcloud beta <span class="built_in">functions</span> deploy function_name \</span><br><span class="line">  --trigger-http \</span><br><span class="line">  --entry-point echoBot \</span><br><span class="line">  --stage-bucket unique-bucket-name</span><br></pre></td></tr></table></figure><h3 id="Set-up-the-webhook"><a href="#Set-up-the-webhook" class="headerlink" title="Set up the webhook"></a>Set up the webhook</h3><p>Deploying the function with the http trigger will return an url to trigger the function. The url would look like <code>https://&lt;GCP_REGION&gt;-&lt;PROJECT_ID&gt;.cloudfunctions.net/function_name</code>. Use this url to set up a web hook for your bot on telegram. You can check more information on webhook on the <a href="https://core.telegram.org/bots/api#setwebhook" target="_blank" rel="noopener">Telegram API documentation</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST \</span><br><span class="line">  -H <span class="string">"Content-Type: application/json"</span> \</span><br><span class="line">  -d <span class="string">'&#123;</span></span><br><span class="line"><span class="string">     "url": "https://&lt;GCP_REGION&gt;-&lt;PROJECT_ID&gt;.cloudfunctions.net/function_name"</span></span><br><span class="line"><span class="string">   &#125;'</span> \</span><br><span class="line">   https://api.telegram.org/bot<span class="variable">$&#123;TELEGRAM_TOKEN&#125;</span>/setWebhook</span><br></pre></td></tr></table></figure><h3 id="Conclusions"><a href="#Conclusions" class="headerlink" title="Conclusions"></a>Conclusions</h3><p>Setting up a Telegram bot using Google Cloud Functions is quick and easy, and with the HTTP trigger is possible to seamlessy set a webhook endpoint for a bot without having to care about a server and https certificates (http trigger are https).</p><p>One last thing to keep in mind is that Functions are stateless and require to be connected to other services to store data or be for example scheduled. </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I played for some time with the idea of having a telegram bot run &lt;em&gt;serverless&lt;/em&gt; in the cloud. Obviously the code run on some server</summary>
      
    
    
    
    
    <category term="gcp" scheme="https://carlo-colombo.github.io/tags/gcp/"/>
    
    <category term="telegram" scheme="https://carlo-colombo.github.io/tags/telegram/"/>
    
    <category term="serverless" scheme="https://carlo-colombo.github.io/tags/serverless/"/>
    
    <category term="google cloud functions" scheme="https://carlo-colombo.github.io/tags/google-cloud-functions/"/>
    
  </entry>
  
  <entry>
    <title>Using Docker Cloud on Scaleway vps</title>
    <link href="https://carlo-colombo.github.io/2016/05/14/Using-Docker-Cloud-on-Scaleway-vps/"/>
    <id>https://carlo-colombo.github.io/2016/05/14/Using-Docker-Cloud-on-Scaleway-vps/</id>
    <published>2016-05-14T09:54:31.000Z</published>
    <updated>2020-11-28T21:36:29.658Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Docker-cloud"><a href="#Docker-cloud" class="headerlink" title="Docker cloud"></a>Docker cloud</h3><p><a href="https://cloud.docker.com/" target="_blank" rel="noopener">Docker Cloud</a> (formerly Tutum) help to deploy containers image on node clusters. Nodes can be provisioned directly from the service (Digital Ocean, Azure, AWS, Packet.net, and IBM SoftLayer). Additionally is possible to use the function <em>Bring your own node</em> (BYON)  to add any linux server connected to the internet as node and deploy on it.</p><p>I’m using this service to manage a stack (a set of images described by a file similar to docker-compose.yml) composed of a static webiste served by nginx, two api server built with elixir, <a href="https://github.com/jwilder/nginx-proxy" target="_blank" rel="noopener">nginx-proxy</a> (for reverse proxing) and <a href="https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion" target="_blank" rel="noopener">jrcs/letsencrypt-nginx-proxy-companion</a> (create/renewal of Let’s Encrypt certificates automatically). Dcoker cloud provide with an interface to start/stop containers and scale up the same image to multiple nodes.</p><p>BYON requires some manual intervention, installing an agent and usually open a port (2375) in to the server firewall to let docker cloud communicate with the agent - additional ports are required to allow network overlay.</p><img src="/2016/05/14/Using-Docker-Cloud-on-Scaleway-vps/docker-cloud-byon.png" title="Install the agent"><h3 id="Scaleway"><a href="#Scaleway" class="headerlink" title="Scaleway"></a>Scaleway</h3><p><a href="https://www.scaleway.com/" target="_blank" rel="noopener">Scaleway</a> is a cloud provider still in beta that offer the smaller server (VC1S - 2 x86 64bit Cores, 2GB memory - 50GB SSD Disk - 200Mbit/s badnwidth) for the price of 2.99 €/month. You can request an invite to the beta at <a href="https://www.scaleway.com/invite/" target="_blank" rel="noopener">https://www.scaleway.com/invite/</a></p><p>To open the port requested by the agent to communicate with docker cloud you need to go to security, pick one of the security group and open the necessary port as shown below. A security group is a set of firewall rules that could be applied to multiple servers.</p><img src="/2016/05/14/Using-Docker-Cloud-on-Scaleway-vps/scaleway-ports.png" title="Open the port on Scaleway"><h3 id="Installing-the-agent"><a href="#Installing-the-agent" class="headerlink" title="Installing the agent"></a>Installing the agent</h3><p>I set up an ubuntu image (14.04) on the server run the command shown in the BYON pop-up on the server, the agent download and install docker and a few service images. After the installation complete it should connect to the Docker Cloud server and update the pop-up with a success message. Taking some times to connect I checked the log of the agent <code>/var/log/dockercloud/agent.log</code> and saw the following error.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">time=&quot;2016-05-13T21:51:46.196955038Z&quot; level=error msg=&quot;There are no more loopback devices available.&quot;</span><br><span class="line">time=&quot;2016-05-13T21:51:46.197040334Z&quot; level=error msg=&quot;[graphdriver] prior storage driver \&quot;devicemapper\&quot; failed: loopback mounting failed&quot;</span><br><span class="line">time=&quot;2016-05-13T21:51:46.197121360Z&quot; level=fatal msg=&quot;Error starting daemon: error initializing graphdriver: loopback mounting failed&quot;</span><br></pre></td></tr></table></figure><p>To solve this issue is possible is necessary to create some loopback devices, once done the agent start docker and notify Docker Cloud that is ready. Once done is possible to start containers on the newly provided node.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i in $(seq 0 255); do</span><br><span class="line">  mknod -m0660 /dev/loop$i b 7 $i</span><br><span class="line">  chown root.disk /dev/loop$i</span><br><span class="line">done</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Docker-cloud&quot;&gt;&lt;a href=&quot;#Docker-cloud&quot; class=&quot;headerlink&quot; title=&quot;Docker cloud&quot;&gt;&lt;/a&gt;Docker cloud&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://cloud.docker.</summary>
      
    
    
    
    
    <category term="docker" scheme="https://carlo-colombo.github.io/tags/docker/"/>
    
    <category term="vps" scheme="https://carlo-colombo.github.io/tags/vps/"/>
    
  </entry>
  
  <entry>
    <title>The 3 E: Elixir, Exrm, and Environment variables</title>
    <link href="https://carlo-colombo.github.io/2016/05/04/The-3-E-Elixir-Exrm-and-Environment-Variables/"/>
    <id>https://carlo-colombo.github.io/2016/05/04/The-3-E-Elixir-Exrm-and-Environment-Variables/</id>
    <published>2016-05-04T19:05:43.000Z</published>
    <updated>2020-11-28T21:36:29.658Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h3><p>I’m building a bot for Telegram, once make a build with exrm I found myself some problem configuring the telegram api key using environment variables. I decided to share what I found because my google foo was not helpful at all.</p><h3 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h3><p>To configure en elixir application built with <a href="https://github.com/bitwalker/exrm" target="_blank" rel="noopener">exrm</a> use <a href="https://github.com/bitwalker/conform" target="_blank" rel="noopener">conform</a> and load the environment variable in the trasforms section of the conform schema.</p><h2 id="config-exs"><a href="#config-exs" class="headerlink" title="config.exs"></a>config.exs</h2><p>config.exs is where the configuration of elixir project are added. The file is interpreted when a project is ran with <code>ies -S mix</code> or <code>mix run</code>.</p><p>The values are retrieved during the lifetime of the application with the functions(<a href="http://elixir-lang.org/docs/stable/elixir/Application.html#get_env/3" target="_blank" rel="noopener">get_env/3</a>, <a href="http://elixir-lang.org/docs/stable/elixir/Application.html#fetch_env/2" target="_blank" rel="noopener">fetch_env/2</a>, <a href="http://elixir-lang.org/docs/stable/elixir/Application.html#fetch_env!/2" target="_blank" rel="noopener">fetch_env!/2</a>) available in the module Application. To include values from the environment where the project is running <a href="http://elixir-lang.org/docs/stable/elixir/System#get_env/1" target="_blank" rel="noopener">System.get_env/1</a> is used.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> Mix.Config</span><br><span class="line"></span><br><span class="line">config <span class="symbol">:plug</span>,</span><br><span class="line">  <span class="symbol">key1:</span> <span class="string">"value1"</span>,</span><br><span class="line">  <span class="symbol">key2:</span> System.get_env(<span class="string">"KEY"</span>)</span><br><span class="line"></span><br><span class="line">import_config <span class="string">"<span class="subst">#&#123;Mix.env&#125;</span>.exs"</span></span><br></pre></td></tr></table></figure><h2 id="exrm"><a href="#exrm" class="headerlink" title="exrm"></a>exrm</h2><p>Surprisingly (if you did not have an erlang background as me) when you make a release of your project with exrm the <code>config.exs</code> file is executed at build time and the environment variables are crystallized in the build output.</p><p>The output from exrm contains a file named <code>sys.config</code> that is the output of executing the <code>config.exs</code> file and is defined as erlang terms. Once released editing this file is the only way to dynamically configure the application once built.</p><h2 id="conform"><a href="#conform" class="headerlink" title="conform"></a>conform</h2><p><a href="https://github.com/bitwalker/conform" target="_blank" rel="noopener">conform</a> is a library from the same author of exrm and is been made to ease the configuration of elixir application. The library validate a property like file (<code>configuration/your_app.conf</code>) against a configuration schema (<code>configuration/your_app.schema.exs</code>) and generate the <code>sys.config</code> file. The schema file contains descriptions, defaults, and types of the parameters. A property file is a lot easier and common to configure than a file containing erlang terms, additionaly conform add flexibility and more control over configurations.</p><p>A couple of task are made available to transition to a conform based configuration.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#generate the schema from the actual configuration</span></span><br><span class="line">mix conform.new</span><br><span class="line"></span><br><span class="line"><span class="comment">#generate a .conf file from the configuration</span></span><br><span class="line">mix conform.configure</span><br></pre></td></tr></table></figure><p>The <code>sys.config</code> is generated at the start of the application, and using the plugin <code>exrm_conform</code> at the start of a packaged application. This behaviour allow to load configuration parameter from environment variables defined when the application is started.</p><p>After running <code>mix conform.new</code> you will find a <code>yourapp.schema.exs</code> in your <code>conf</code> folder, this file has 3 main sections: mapping, transforms, and validators. The mapping section is where the parameters are defined and where you can set up defaults, descriptions, and type. The transform section allow to add transformation function to change or derive a configured parameter. In the end the validators sections allow to reject invalid configuration errors and stop the application.</p><p>At first I tried to add the reading from the environment variable to the default of the parameters, but this lend to an uncommon situation where a static parameter (the one in <code>yourapp.conf</code>) will override a parameter derived from an environment variable.</p><p>Eventually I found that adding a function to transforms is probably a better way to do it.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  <span class="symbol">extends:</span> [],</span><br><span class="line">  <span class="symbol">import:</span> [],</span><br><span class="line">  <span class="symbol">mappings:</span> [...],</span><br><span class="line">  <span class="symbol">transforms:</span> [</span><br><span class="line">    <span class="string">"nadia.token"</span>: <span class="keyword">fn</span> conf -&gt;</span><br><span class="line">      [&#123;_, val&#125;] = Conform.Conf.get(conf, <span class="string">"nadia.token"</span>)</span><br><span class="line">      System.get_env(<span class="string">"TELEGRAM_BOT_TOKEN"</span>) || val</span><br><span class="line">    <span class="keyword">end</span>],</span><br><span class="line">  <span class="symbol">validators:</span> []</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>In this case we are loading with the conform API the the configured value and return it only if the environment variable is empty. Generating the parameter in this way disallow to have a default in the mapping sections but a workaround would be to chain <code>||</code> to add a default value. I think that this approach is not bad for api key and similar values that you don’t want to checkin with your code (even if are keys of development environments).</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h3&gt;&lt;p&gt;I’m building a bot for Telegram, once make a build with ex</summary>
      
    
    
    
    
    <category term="elixir" scheme="https://carlo-colombo.github.io/tags/elixir/"/>
    
    <category term="conform" scheme="https://carlo-colombo.github.io/tags/conform/"/>
    
    <category term="exrm" scheme="https://carlo-colombo.github.io/tags/exrm/"/>
    
  </entry>
  
</feed>
